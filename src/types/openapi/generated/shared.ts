/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = Record<string, never>;

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    VehicleModesOfTransportEnum: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "other" | "unknown";
    /** @enum {string} */
    UseRealtimeDataEnum: "full" | "explanatory" | "none";
    /** @enum {string} */
    PlaceTypeEnum: "stop" | "address" | "poi" | "location" | "topographicPlace";
    InternationalText: {
      text: string;
    };
    GeoPosition: {
      longitude: number;
      latitude: number;
    };
    PlaceRef: {
      stopPointRef?: string;
      stopPlaceRef?: string;
      geoPosition?: components["schemas"]["GeoPosition"];
      name: components["schemas"]["InternationalText"];
    };
    PlaceContext: {
      placeRef: components["schemas"]["PlaceRef"];
      depArrTime?: string;
    };
    ServiceRequestContext: {
      language?: string;
    };
    PointOfInterestCategory: {
      osmTag?: {
        tag: string;
        value: string;
      };
    };
    StopPoint: {
      stopPointRef: string;
      stopPointName: components["schemas"]["InternationalText"];
      plannedQuay?: components["schemas"]["InternationalText"];
      estimatedQuay?: components["schemas"]["InternationalText"];
    };
    StopPlace: {
      stopPlaceRef?: string;
      stopPlaceName?: components["schemas"]["InternationalText"];
    };
    TopographicPlace: {
      topographicPlaceCode: string;
      topographicPlaceName: components["schemas"]["InternationalText"];
    };
    PointOfInterest: {
      publicCode: string;
      name: components["schemas"]["InternationalText"];
      pointOfInterestCategory: (components["schemas"]["PointOfInterestCategory"])[];
      topographicPlaceRef?: string;
    };
    Address: {
      publicCode: string;
      name: components["schemas"]["InternationalText"];
      postCode?: string;
      topographicPlaceName?: string;
      TopographicPlaceRef?: string;
      Street?: string;
      HouseNumber?: string;
    };
    Place: {
      stopPoint?: components["schemas"]["StopPoint"];
      stopPlace?: components["schemas"]["StopPlace"];
      topographicPlace?: components["schemas"]["TopographicPlace"];
      pointOfInterest?: components["schemas"]["PointOfInterest"];
      address?: components["schemas"]["Address"];
      name: components["schemas"]["InternationalText"];
      geoPosition: components["schemas"]["GeoPosition"];
      mode: (components["schemas"]["VehicleModesOfTransportEnum"])[];
    };
    SharedServiceArrivalDeparture: {
      timetabledTime: string;
      estimatedTime?: string;
    };
    CallAtStop: {
      stopPointRef?: string;
      stopPointName?: components["schemas"]["InternationalText"];
      nameSuffix?: components["schemas"]["InternationalText"];
      plannedQuay?: components["schemas"]["InternationalText"];
      estimatedQuay?: components["schemas"]["InternationalText"];
      serviceArrival?: components["schemas"]["SharedServiceArrivalDeparture"];
      serviceDeparture?: components["schemas"]["SharedServiceArrivalDeparture"];
      order?: number;
      requestStop?: boolean;
      unplannedStop?: boolean;
      notServicedStop?: boolean;
      noBoardingAtStop?: boolean;
      noAlightingAtStop?: boolean;
    };
    Mode: {
      ptMode: string;
      railSubmode?: string;
      name: components["schemas"]["InternationalText"];
      shortName: components["schemas"]["InternationalText"];
    };
    ProductCategory: {
      name?: components["schemas"]["InternationalText"];
      shortName?: components["schemas"]["InternationalText"];
      productCategoryRef?: string;
    };
    GeneralAttribute: {
      userText: components["schemas"]["InternationalText"];
      code: string;
    };
    DatedJourney: {
      conventionalModeOfOperation?: string;
      operatingDayRef: string;
      journeyRef: string;
      publicCode?: string;
      lineRef: string;
      directionRef?: string;
      mode: components["schemas"]["Mode"];
      productCategory?: components["schemas"]["ProductCategory"];
      publishedServiceName: components["schemas"]["InternationalText"];
      trainNumber?: string;
      attribute: (components["schemas"]["GeneralAttribute"])[];
      operatorRef?: string;
      destinationStopPointRef?: string;
      destinationText?: components["schemas"]["InternationalText"];
      unplanned?: boolean;
      cancelled?: boolean;
      deviation?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
