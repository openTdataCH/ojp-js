/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/ojp": {
    /**
     * Main /ojp endpoint 
     * @description Main /ojp endpoint
     */
    post: {
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/xml": components["schemas"]["OJP"];
          };
        };
        /** @description Server error */
        500: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ModeAndModeOfOperationFilter: {
      exclude?: boolean;
      ptMode?: ("air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "other" | "unknown")[];
    };
    TripParam: {
      modeAndModeOfOperationFilter?: (components["schemas"]["ModeAndModeOfOperationFilter"])[];
      numberOfResults?: number;
      numberOfResultsBefore?: number;
      numberOfResultsAfter?: number;
      /** @enum {string} */
      useRealtimeData?: "full" | "explanatory" | "none";
      includeAllRestrictedLines?: boolean;
      includeTrackSections?: boolean;
      includeLegProjection?: boolean;
      includeTurnDescription?: boolean;
      includeIntermediateStops?: boolean;
    };
    ViaPoint: {
      placeRef: {
        stopPointRef?: string;
        stopPlaceRef?: string;
        geoPosition?: {
          longitude: number;
          latitude: number;
        };
        name: {
          text: string;
        };
      };
      dwellTime?: number;
    };
    OJPTripRequest: {
      requestTimestamp: string;
      origin: {
        placeRef: components["schemas"]["ViaPoint"]["placeRef"];
        depArrTime?: string;
      };
      destination: components["schemas"]["OJPTripRequest"]["origin"];
      via: (components["schemas"]["ViaPoint"])[];
      params?: components["schemas"]["TripParam"];
    };
    OJP: {
      OJPRequest: {
        serviceRequest: {
          serviceRequestContext?: {
            language?: string;
          };
          requestTimestamp: string;
          requestorRef: string;
          OJPTripRequest: components["schemas"]["OJPTripRequest"];
        };
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
