/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/ojp": {
    /**
     * Main /ojp endpoint 
     * @description Main /ojp endpoint
     */
    post: {
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/xml": components["schemas"]["OJP"];
          };
        };
        /** @description Server error */
        500: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SharedServiceArrivalDeparture: {
      timetabledTime: string;
      estimatedTime?: string;
    };
    Mode: {
      ptMode: string;
      railSubmode?: string;
      name: {
        text: string;
      };
      shortName: components["schemas"]["Mode"]["name"];
    };
    ProductCategory: {
      name?: components["schemas"]["Mode"]["name"];
      shortName?: components["schemas"]["Mode"]["name"];
      productCategoryRef?: string;
    };
    GeneralAttribute: {
      userText: components["schemas"]["Mode"]["name"];
      code: string;
    };
    SharedLegSection: {
      stopPointRef?: string;
      stopPointName?: components["schemas"]["Mode"]["name"];
      nameSuffix?: components["schemas"]["Mode"]["name"];
      plannedQuay?: components["schemas"]["Mode"]["name"];
      estimatedQuay?: components["schemas"]["Mode"]["name"];
      serviceArrival?: components["schemas"]["SharedServiceArrivalDeparture"];
      serviceDeparture?: components["schemas"]["SharedServiceArrivalDeparture"];
      order?: number;
      requestStop?: boolean;
      unplannedStop?: boolean;
      notServicedStop?: boolean;
      noBoardingAtStop?: boolean;
      noAlightingAtStop?: boolean;
    };
    LegBoard: WithRequired<components["schemas"]["SharedLegSection"], "stopPointRef" | "stopPointName" | "serviceDeparture">;
    LegIntermediate: WithRequired<components["schemas"]["SharedLegSection"], "stopPointRef" | "stopPointName" | "serviceArrival" | "serviceDeparture">;
    LegAlight: WithRequired<components["schemas"]["SharedLegSection"], "stopPointRef" | "stopPointName" | "serviceArrival">;
    LinkProjectionGeoPosition: {
      longitude: number;
      latitude: number;
    };
    LinkProjection: {
      position: (components["schemas"]["LinkProjectionGeoPosition"])[];
    };
    TrackSection: {
      trackSectionStart?: components["schemas"]["TransferLeg"]["legEnd"];
      trackSectionEnd?: components["schemas"]["TransferLeg"]["legEnd"];
      linkProjection?: components["schemas"]["LinkProjection"];
    };
    LegTrack: {
      trackSection: components["schemas"]["TrackSection"];
    };
    DatedJourney: {
      conventionalModeOfOperation?: string;
      operatingDayRef: string;
      journeyRef: string;
      publicCode?: string;
      lineRef: string;
      directionRef?: string;
      mode: components["schemas"]["Mode"];
      productCategory?: components["schemas"]["ProductCategory"];
      publishedServiceName: components["schemas"]["Mode"]["name"];
      trainNumber?: string;
      attribute: (components["schemas"]["GeneralAttribute"])[];
      operatorRef?: string;
      destinationStopPointRef?: string;
      destinationText?: components["schemas"]["Mode"]["name"];
      unplanned?: boolean;
      cancelled?: boolean;
      deviation?: boolean;
    };
    ContinuousService: {
      personalModeOfOperation?: string;
      personalMode?: string;
    };
    TimedLeg: {
      legBoard: components["schemas"]["LegBoard"];
      legIntermediate: (components["schemas"]["LegIntermediate"])[];
      legAlight: components["schemas"]["LegAlight"];
      service: components["schemas"]["DatedJourney"];
      legTrack?: components["schemas"]["LegTrack"];
    };
    TransferLeg: {
      /** @enum {string} */
      transferType: "walk" | "remainInVehicle";
      legStart: components["schemas"]["TransferLeg"]["legEnd"];
      legEnd: {
        stopPointRef?: string;
        stopPlaceRef?: string;
        geoPosition?: {
          longitude: number;
          latitude: number;
        };
        name: components["schemas"]["Mode"]["name"];
      };
      duration: string;
    };
    ContinuousLeg: {
      legStart: components["schemas"]["TransferLeg"]["legEnd"];
      legEnd: components["schemas"]["TransferLeg"]["legEnd"];
      service: components["schemas"]["ContinuousService"];
      duration: string;
    };
    Leg: {
      id: string;
      duration?: string;
      timedLeg?: components["schemas"]["TimedLeg"];
      transferLeg?: components["schemas"]["TransferLeg"];
      continuousLeg?: components["schemas"]["ContinuousLeg"];
    };
    Trip: {
      id: string;
      duration: string;
      /** Format: date-time */
      startTime: string;
      /** Format: date-time */
      endTime: string;
      transfers: number;
      leg: (components["schemas"]["Leg"])[];
    };
    TripResult: {
      id: string;
      trip: components["schemas"]["Trip"];
    };
    OJPTripDelivery: {
      responseTimestamp: string;
      requestMessageRef?: string;
      defaultLanguage?: string;
      calcTime?: string;
      tripResult: (components["schemas"]["TripResult"])[];
    };
    OJP: {
      OJPResponse: {
        serviceDelivery: {
          responseTimestamp: string;
          producerRef: string;
          OJPTripDelivery: components["schemas"]["OJPTripDelivery"];
        };
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
