/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/ojp": {
    /**
     * Main /ojp endpoint 
     * @description Main /ojp endpoint
     */
    post: {
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/xml": {
              OJPRequest: {
                serviceRequest: {
                  serviceRequestContext?: {
                    language?: string;
                  };
                  requestTimestamp: string;
                  requestorRef: string;
                  OJPTripRefineRequest?: {
                    requestTimestamp: string;
                    tripResult: {
                      id: string;
                      trip: {
                        id: string;
                        duration: string;
                        /** Format: date-time */
                        startTime: string;
                        /** Format: date-time */
                        endTime: string;
                        transfers: number;
                        leg: ({
                            id: string;
                            duration?: string;
                            timedLeg?: {
                              legBoard: WithRequired<{
                                stopPointRef?: string;
                                stopPointName?: {
                                  text: string;
                                };
                                nameSuffix?: {
                                  text: string;
                                };
                                plannedQuay?: {
                                  text: string;
                                };
                                estimatedQuay?: {
                                  text: string;
                                };
                                serviceArrival?: {
                                  timetabledTime: string;
                                  estimatedTime?: string;
                                };
                                serviceDeparture?: {
                                  timetabledTime: string;
                                  estimatedTime?: string;
                                };
                                order?: number;
                                requestStop?: boolean;
                                unplannedStop?: boolean;
                                notServicedStop?: boolean;
                                noBoardingAtStop?: boolean;
                                noAlightingAtStop?: boolean;
                              }, "stopPointRef" | "stopPointName" | "serviceDeparture">;
                              legIntermediate: (WithRequired<{
                                  stopPointRef?: string;
                                  stopPointName?: {
                                    text: string;
                                  };
                                  nameSuffix?: {
                                    text: string;
                                  };
                                  plannedQuay?: {
                                    text: string;
                                  };
                                  estimatedQuay?: {
                                    text: string;
                                  };
                                  serviceArrival?: {
                                    timetabledTime: string;
                                    estimatedTime?: string;
                                  };
                                  serviceDeparture?: {
                                    timetabledTime: string;
                                    estimatedTime?: string;
                                  };
                                  order?: number;
                                  requestStop?: boolean;
                                  unplannedStop?: boolean;
                                  notServicedStop?: boolean;
                                  noBoardingAtStop?: boolean;
                                  noAlightingAtStop?: boolean;
                                }, "stopPointRef" | "stopPointName" | "serviceArrival" | "serviceDeparture">)[];
                              legAlight: WithRequired<{
                                stopPointRef?: string;
                                stopPointName?: {
                                  text: string;
                                };
                                nameSuffix?: {
                                  text: string;
                                };
                                plannedQuay?: {
                                  text: string;
                                };
                                estimatedQuay?: {
                                  text: string;
                                };
                                serviceArrival?: {
                                  timetabledTime: string;
                                  estimatedTime?: string;
                                };
                                serviceDeparture?: {
                                  timetabledTime: string;
                                  estimatedTime?: string;
                                };
                                order?: number;
                                requestStop?: boolean;
                                unplannedStop?: boolean;
                                notServicedStop?: boolean;
                                noBoardingAtStop?: boolean;
                                noAlightingAtStop?: boolean;
                              }, "stopPointRef" | "stopPointName" | "serviceArrival">;
                              service: {
                                conventionalModeOfOperation?: string;
                                operatingDayRef: string;
                                journeyRef: string;
                                publicCode?: string;
                                lineRef: string;
                                directionRef?: string;
                                mode: {
                                  ptMode: string;
                                  railSubmode?: string;
                                  name: {
                                    text: string;
                                  };
                                  shortName: {
                                    text: string;
                                  };
                                };
                                productCategory?: {
                                  name?: {
                                    text: string;
                                  };
                                  shortName?: {
                                    text: string;
                                  };
                                  productCategoryRef?: string;
                                };
                                publishedServiceName: {
                                  text: string;
                                };
                                trainNumber?: string;
                                attribute: ({
                                    userText: {
                                      text: string;
                                    };
                                    code: string;
                                  })[];
                                operatorRef?: string;
                                destinationStopPointRef?: string;
                                destinationText?: {
                                  text: string;
                                };
                                unplanned?: boolean;
                                cancelled?: boolean;
                                deviation?: boolean;
                              };
                              legTrack?: {
                                trackSection: {
                                  trackSectionStart?: {
                                    stopPointRef?: string;
                                    stopPlaceRef?: string;
                                    geoPosition?: {
                                      longitude: number;
                                      latitude: number;
                                    };
                                    name: {
                                      text: string;
                                    };
                                  };
                                  trackSectionEnd?: {
                                    stopPointRef?: string;
                                    stopPlaceRef?: string;
                                    geoPosition?: {
                                      longitude: number;
                                      latitude: number;
                                    };
                                    name: {
                                      text: string;
                                    };
                                  };
                                  linkProjection?: {
                                    position: ({
                                        longitude: number;
                                        latitude: number;
                                      })[];
                                  };
                                };
                              };
                            };
                            transferLeg?: {
                              /** @enum {string} */
                              transferType: "walk" | "remainInVehicle";
                              legStart: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                  longitude: number;
                                  latitude: number;
                                };
                                name: {
                                  text: string;
                                };
                              };
                              legEnd: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                  longitude: number;
                                  latitude: number;
                                };
                                name: {
                                  text: string;
                                };
                              };
                              duration: string;
                            };
                            continuousLeg?: {
                              legStart: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                  longitude: number;
                                  latitude: number;
                                };
                                name: {
                                  text: string;
                                };
                              };
                              legEnd: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                  longitude: number;
                                  latitude: number;
                                };
                                name: {
                                  text: string;
                                };
                              };
                              service: {
                                personalModeOfOperation?: string;
                                personalMode?: string;
                              };
                              duration: string;
                            };
                          })[];
                      };
                    };
                  };
                };
              };
            };
          };
        };
        /** @description Server error */
        500: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    OJPTripRefineRequest: {
      requestTimestamp: string;
      tripResult: {
        id: string;
        trip: {
          id: string;
          duration: string;
          /** Format: date-time */
          startTime: string;
          /** Format: date-time */
          endTime: string;
          transfers: number;
          leg: ({
              id: string;
              duration?: string;
              timedLeg?: {
                legBoard: WithRequired<{
                  stopPointRef?: string;
                  stopPointName?: {
                    text: string;
                  };
                  nameSuffix?: {
                    text: string;
                  };
                  plannedQuay?: {
                    text: string;
                  };
                  estimatedQuay?: {
                    text: string;
                  };
                  serviceArrival?: {
                    timetabledTime: string;
                    estimatedTime?: string;
                  };
                  serviceDeparture?: {
                    timetabledTime: string;
                    estimatedTime?: string;
                  };
                  order?: number;
                  requestStop?: boolean;
                  unplannedStop?: boolean;
                  notServicedStop?: boolean;
                  noBoardingAtStop?: boolean;
                  noAlightingAtStop?: boolean;
                }, "stopPointRef" | "stopPointName" | "serviceDeparture">;
                legIntermediate: (WithRequired<{
                    stopPointRef?: string;
                    stopPointName?: {
                      text: string;
                    };
                    nameSuffix?: {
                      text: string;
                    };
                    plannedQuay?: {
                      text: string;
                    };
                    estimatedQuay?: {
                      text: string;
                    };
                    serviceArrival?: {
                      timetabledTime: string;
                      estimatedTime?: string;
                    };
                    serviceDeparture?: {
                      timetabledTime: string;
                      estimatedTime?: string;
                    };
                    order?: number;
                    requestStop?: boolean;
                    unplannedStop?: boolean;
                    notServicedStop?: boolean;
                    noBoardingAtStop?: boolean;
                    noAlightingAtStop?: boolean;
                  }, "stopPointRef" | "stopPointName" | "serviceArrival" | "serviceDeparture">)[];
                legAlight: WithRequired<{
                  stopPointRef?: string;
                  stopPointName?: {
                    text: string;
                  };
                  nameSuffix?: {
                    text: string;
                  };
                  plannedQuay?: {
                    text: string;
                  };
                  estimatedQuay?: {
                    text: string;
                  };
                  serviceArrival?: {
                    timetabledTime: string;
                    estimatedTime?: string;
                  };
                  serviceDeparture?: {
                    timetabledTime: string;
                    estimatedTime?: string;
                  };
                  order?: number;
                  requestStop?: boolean;
                  unplannedStop?: boolean;
                  notServicedStop?: boolean;
                  noBoardingAtStop?: boolean;
                  noAlightingAtStop?: boolean;
                }, "stopPointRef" | "stopPointName" | "serviceArrival">;
                service: {
                  conventionalModeOfOperation?: string;
                  operatingDayRef: string;
                  journeyRef: string;
                  publicCode?: string;
                  lineRef: string;
                  directionRef?: string;
                  mode: {
                    ptMode: string;
                    railSubmode?: string;
                    name: {
                      text: string;
                    };
                    shortName: {
                      text: string;
                    };
                  };
                  productCategory?: {
                    name?: {
                      text: string;
                    };
                    shortName?: {
                      text: string;
                    };
                    productCategoryRef?: string;
                  };
                  publishedServiceName: {
                    text: string;
                  };
                  trainNumber?: string;
                  attribute: ({
                      userText: {
                        text: string;
                      };
                      code: string;
                    })[];
                  operatorRef?: string;
                  destinationStopPointRef?: string;
                  destinationText?: {
                    text: string;
                  };
                  unplanned?: boolean;
                  cancelled?: boolean;
                  deviation?: boolean;
                };
                legTrack?: {
                  trackSection: {
                    trackSectionStart?: {
                      stopPointRef?: string;
                      stopPlaceRef?: string;
                      geoPosition?: {
                        longitude: number;
                        latitude: number;
                      };
                      name: {
                        text: string;
                      };
                    };
                    trackSectionEnd?: {
                      stopPointRef?: string;
                      stopPlaceRef?: string;
                      geoPosition?: {
                        longitude: number;
                        latitude: number;
                      };
                      name: {
                        text: string;
                      };
                    };
                    linkProjection?: {
                      position: ({
                          longitude: number;
                          latitude: number;
                        })[];
                    };
                  };
                };
              };
              transferLeg?: {
                /** @enum {string} */
                transferType: "walk" | "remainInVehicle";
                legStart: {
                  stopPointRef?: string;
                  stopPlaceRef?: string;
                  geoPosition?: {
                    longitude: number;
                    latitude: number;
                  };
                  name: {
                    text: string;
                  };
                };
                legEnd: {
                  stopPointRef?: string;
                  stopPlaceRef?: string;
                  geoPosition?: {
                    longitude: number;
                    latitude: number;
                  };
                  name: {
                    text: string;
                  };
                };
                duration: string;
              };
              continuousLeg?: {
                legStart: {
                  stopPointRef?: string;
                  stopPlaceRef?: string;
                  geoPosition?: {
                    longitude: number;
                    latitude: number;
                  };
                  name: {
                    text: string;
                  };
                };
                legEnd: {
                  stopPointRef?: string;
                  stopPlaceRef?: string;
                  geoPosition?: {
                    longitude: number;
                    latitude: number;
                  };
                  name: {
                    text: string;
                  };
                };
                service: {
                  personalModeOfOperation?: string;
                  personalMode?: string;
                };
                duration: string;
              };
            })[];
        };
      };
    };
    OJP: {
      OJPRequest: {
        serviceRequest: {
          serviceRequestContext?: {
            language?: string;
          };
          requestTimestamp: string;
          requestorRef: string;
          OJPTripRefineRequest?: {
            requestTimestamp: string;
            tripResult: {
              id: string;
              trip: {
                id: string;
                duration: string;
                /** Format: date-time */
                startTime: string;
                /** Format: date-time */
                endTime: string;
                transfers: number;
                leg: ({
                    id: string;
                    duration?: string;
                    timedLeg?: {
                      legBoard: WithRequired<{
                        stopPointRef?: string;
                        stopPointName?: {
                          text: string;
                        };
                        nameSuffix?: {
                          text: string;
                        };
                        plannedQuay?: {
                          text: string;
                        };
                        estimatedQuay?: {
                          text: string;
                        };
                        serviceArrival?: {
                          timetabledTime: string;
                          estimatedTime?: string;
                        };
                        serviceDeparture?: {
                          timetabledTime: string;
                          estimatedTime?: string;
                        };
                        order?: number;
                        requestStop?: boolean;
                        unplannedStop?: boolean;
                        notServicedStop?: boolean;
                        noBoardingAtStop?: boolean;
                        noAlightingAtStop?: boolean;
                      }, "stopPointRef" | "stopPointName" | "serviceDeparture">;
                      legIntermediate: (WithRequired<{
                          stopPointRef?: string;
                          stopPointName?: {
                            text: string;
                          };
                          nameSuffix?: {
                            text: string;
                          };
                          plannedQuay?: {
                            text: string;
                          };
                          estimatedQuay?: {
                            text: string;
                          };
                          serviceArrival?: {
                            timetabledTime: string;
                            estimatedTime?: string;
                          };
                          serviceDeparture?: {
                            timetabledTime: string;
                            estimatedTime?: string;
                          };
                          order?: number;
                          requestStop?: boolean;
                          unplannedStop?: boolean;
                          notServicedStop?: boolean;
                          noBoardingAtStop?: boolean;
                          noAlightingAtStop?: boolean;
                        }, "stopPointRef" | "stopPointName" | "serviceArrival" | "serviceDeparture">)[];
                      legAlight: WithRequired<{
                        stopPointRef?: string;
                        stopPointName?: {
                          text: string;
                        };
                        nameSuffix?: {
                          text: string;
                        };
                        plannedQuay?: {
                          text: string;
                        };
                        estimatedQuay?: {
                          text: string;
                        };
                        serviceArrival?: {
                          timetabledTime: string;
                          estimatedTime?: string;
                        };
                        serviceDeparture?: {
                          timetabledTime: string;
                          estimatedTime?: string;
                        };
                        order?: number;
                        requestStop?: boolean;
                        unplannedStop?: boolean;
                        notServicedStop?: boolean;
                        noBoardingAtStop?: boolean;
                        noAlightingAtStop?: boolean;
                      }, "stopPointRef" | "stopPointName" | "serviceArrival">;
                      service: {
                        conventionalModeOfOperation?: string;
                        operatingDayRef: string;
                        journeyRef: string;
                        publicCode?: string;
                        lineRef: string;
                        directionRef?: string;
                        mode: {
                          ptMode: string;
                          railSubmode?: string;
                          name: {
                            text: string;
                          };
                          shortName: {
                            text: string;
                          };
                        };
                        productCategory?: {
                          name?: {
                            text: string;
                          };
                          shortName?: {
                            text: string;
                          };
                          productCategoryRef?: string;
                        };
                        publishedServiceName: {
                          text: string;
                        };
                        trainNumber?: string;
                        attribute: ({
                            userText: {
                              text: string;
                            };
                            code: string;
                          })[];
                        operatorRef?: string;
                        destinationStopPointRef?: string;
                        destinationText?: {
                          text: string;
                        };
                        unplanned?: boolean;
                        cancelled?: boolean;
                        deviation?: boolean;
                      };
                      legTrack?: {
                        trackSection: {
                          trackSectionStart?: {
                            stopPointRef?: string;
                            stopPlaceRef?: string;
                            geoPosition?: {
                              longitude: number;
                              latitude: number;
                            };
                            name: {
                              text: string;
                            };
                          };
                          trackSectionEnd?: {
                            stopPointRef?: string;
                            stopPlaceRef?: string;
                            geoPosition?: {
                              longitude: number;
                              latitude: number;
                            };
                            name: {
                              text: string;
                            };
                          };
                          linkProjection?: {
                            position: ({
                                longitude: number;
                                latitude: number;
                              })[];
                          };
                        };
                      };
                    };
                    transferLeg?: {
                      /** @enum {string} */
                      transferType: "walk" | "remainInVehicle";
                      legStart: {
                        stopPointRef?: string;
                        stopPlaceRef?: string;
                        geoPosition?: {
                          longitude: number;
                          latitude: number;
                        };
                        name: {
                          text: string;
                        };
                      };
                      legEnd: {
                        stopPointRef?: string;
                        stopPlaceRef?: string;
                        geoPosition?: {
                          longitude: number;
                          latitude: number;
                        };
                        name: {
                          text: string;
                        };
                      };
                      duration: string;
                    };
                    continuousLeg?: {
                      legStart: {
                        stopPointRef?: string;
                        stopPlaceRef?: string;
                        geoPosition?: {
                          longitude: number;
                          latitude: number;
                        };
                        name: {
                          text: string;
                        };
                      };
                      legEnd: {
                        stopPointRef?: string;
                        stopPlaceRef?: string;
                        geoPosition?: {
                          longitude: number;
                          latitude: number;
                        };
                        name: {
                          text: string;
                        };
                      };
                      service: {
                        personalModeOfOperation?: string;
                        personalMode?: string;
                      };
                      duration: string;
                    };
                  })[];
              };
            };
          };
        };
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
