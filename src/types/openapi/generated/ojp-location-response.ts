/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/ojp": {
    /**
     * Main /ojp endpoint 
     * @description Main /ojp endpoint
     */
    post: {
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/xml": components["schemas"]["OJP"];
          };
        };
        /** @description Server error */
        500: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    PointOfInterestCategory: {
      osmTag?: {
        tag: string;
        value: string;
      };
    };
    StopPoint: {
      stopPointRef: string;
      stopPointName: components["schemas"]["Place"]["name"];
      plannedQuay?: components["schemas"]["Place"]["name"];
      estimatedQuay?: components["schemas"]["Place"]["name"];
    };
    StopPlace: {
      stopPlaceRef?: string;
      stopPlaceName?: components["schemas"]["Place"]["name"];
    };
    TopographicPlace: {
      topographicPlaceCode: string;
      topographicPlaceName: components["schemas"]["Place"]["name"];
    };
    PointOfInterest: {
      publicCode: string;
      name: components["schemas"]["Place"]["name"];
      pointOfInterestCategory: (components["schemas"]["PointOfInterestCategory"])[];
      topographicPlaceRef?: string;
    };
    Address: {
      publicCode: string;
      name: components["schemas"]["Place"]["name"];
      postCode?: string;
      topographicPlaceName?: string;
      TopographicPlaceRef?: string;
      Street?: string;
      HouseNumber?: string;
    };
    Place: {
      stopPoint?: components["schemas"]["StopPoint"];
      stopPlace?: components["schemas"]["StopPlace"];
      topographicPlace?: components["schemas"]["TopographicPlace"];
      pointOfInterest?: components["schemas"]["PointOfInterest"];
      address?: components["schemas"]["Address"];
      name: {
        text: string;
      };
      geoPosition: {
        longitude: number;
        latitude: number;
      };
      mode: ("air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "other" | "unknown")[];
    };
    PlaceResult: {
      place: components["schemas"]["Place"];
      complete: boolean;
      probability?: number;
    };
    OJPLocationInformationDelivery: {
      responseTimestamp: string;
      requestMessageRef?: string;
      defaultLanguage?: string;
      calcTime?: string;
      placeResult: (components["schemas"]["PlaceResult"])[];
    };
    OJP: {
      OJPResponse: {
        serviceDelivery: {
          responseTimestamp: string;
          producerRef: string;
          OJPLocationInformationDelivery: components["schemas"]["OJPLocationInformationDelivery"];
        };
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
